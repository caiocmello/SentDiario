# -*- coding: utf-8 -*-
"""Dash-arquivoPT-final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QqDdYjuUru7QyQm7_Kvx67WCd0yQDO91
"""

!pip install dash --upgrade
!pip install jupyter_dash --upgrade
!pip install dash_bootstrap_components --upgrade

import datetime
import requests
import pandas as pd
from io import StringIO
from datetime import date
import dash
from jupyter_dash import JupyterDash
from dash import dcc
from dash import html
from dash.dependencies import Input, Output
import dash_bootstrap_components as dbc
import plotly.express as px

import pandas as pd

df = pd.read_csv('dataframe_arquivoPT.csv')

df['date'] = pd.to_datetime(df['date'])

df = df.rename(columns={df.columns[4]: "News outlet"})

df.info()

app = JupyterDash(__name__, external_stylesheets=[dbc.themes.LITERA]) # for here use JupyterDash in a Jupyter environment
server = app.server

unique_topics = df['Topic'].unique()
print(unique_topics)

app.layout = dbc.Container(
[   dbc.Row([ # row 1
    dbc.Col([html.H1('News sentiment for the topic: Acordo OrtogrÃ¡fico')],
    className="text-center mt-3 mb-1")
]
),
    dbc.Row([ # row 2
        dbc.Label("Select a date range:", className="fw-bold")
]),

dbc.Row([ # row 3
        dcc.DatePickerRange(
            id='date-range',
            min_date_allowed=df['date'].min().date(),
            max_date_allowed=df['date'].max().date(),
            initial_visible_month=df['date'].min().date(),
            start_date=df['date'].min().date(),
            end_date=df['date'].max().date()
        )
]),

dbc.Row([ # row X
        dbc.Col(
            dcc.Dropdown(
                id="topic-selector",
                options=[
                    {"label": topic, "value": topic} for topic in unique_topics
                ],
                value="Imigrantes",  # Set the initial value
                style={"width": "50%"})


        )
]),

dbc.Row([ # row 4
        dbc.Col(dcc.Graph(id='line-graph-1'),
                )
]),

# dbc.Row([ # row 5
#         dbc.Col(dcc.Graph(id='line-graph-2'),
#                 )
# ])

])

# callback decorator
@app.callback(
    Output('line-graph-1', 'figure'),
    #Output('line-graph-2', 'figure'),
    Input("topic-selector", "value"),
    Input('date-range', 'start_date'),
    Input('date-range', 'end_date')
)

# callback function
def update_output(selected_topic, start_date, end_date):
    # filter dataframes based on updated data range
    mask_1 = ((df["Topic"] == selected_topic) & (df['date'] >= start_date) & (df['date'] <= end_date))
    #mask_2 = ((df2["domain_folder_name"] == selected_domain) & (df2['date'] >= start_date) & (df2['date'] <= end_date))
    df_filtered = df.loc[mask_1]
    #df_2_filtered = df2.loc[mask_2]

#create line graphs based on filtered dataframes
    line_fig_1 = px.line(df_filtered, x="date", y="rolling_mean",
                     color='News outlet', title="Sentiment 1")
    #line_fig_2 = px.line(df_2_filtered, x='date', y='rolling_mean',
                     #color='domain_folder_name', title="Sentiment 2")

#set x-axis title and y-axis title in line graphs
    line_fig_1.update_layout(
                   xaxis_title='Date',
                   yaxis_title='Sentiment')
    #line_fig_2.update_layout(
                   #xaxis_title='Date',
                   #yaxis_title='Sentiment')

#set label format on y-axis in line graphs
    line_fig_1.update_xaxes(tickformat="%b %d<br>%Y")
    #line_fig_2.update_xaxes(tickformat="%b %d<br>%Y")


    return line_fig_1
    #, line_fig_2

app.run_server(debug=True)